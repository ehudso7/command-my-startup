'use client';

import { useState, useEffect } from 'react';
import { useParams } from 'next/navigation';
import { useAuth } from '@/contexts/AuthContext';
import ChatInterface from '@/components/chat/ChatInterface';

interface Message {
  id: string;
  role: 'system' | 'user' | 'assistant';
  content: string;
  timestamp: string;
}

export default function ChatViewPage() {
  const [initialMessages, setInitialMessages] = useState<Message[]>([]);
  const [conversation, setConversation] = useState<any>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const { user } = useAuth();
  const params = useParams();
  const conversationId = params.id as string;
  
  // Skip fetching for new chat
  const isNewChat = conversationId === 'new';
  
  // Fetch conversation and messages
  useEffect(() => {
    if (!user || isNewChat) {
      setLoading(false);
      return;
    }
    
    const fetchData = async () => {
      try {
        const response = await fetch(`/api/conversations/${conversationId}/messages`);
        
        if (!response.ok) {
          const data = await response.json();
          throw new Error(data.error || 'Failed to fetch conversation');
        }
        
        const data = await response.json();
        
        setConversation(data.conversation);
        
        // Convert messages to the format expected by ChatInterface
        const formattedMessages = data.messages.map((msg: any) => ({
          id: msg.id,
          role: msg.sender === 'user' ? 'user' : 'assistant',
          content: msg.content,
          timestamp: msg.created_at,
        }));
        
        setInitialMessages(formattedMessages);
      } catch (error: any) {
        console.error('Error fetching data:', error);
        setError(error.message);
      } finally {
        setLoading(false);
      }
    };
    
    fetchData();
  }, [user, conversationId, isNewChat]);
  
  return (
    <div className="container mx-auto px-4 py-8 h-[calc(100vh-4rem)]">
      {loading ? (
        <div className="flex justify-center py-12">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500"></div>
        </div>
      ) : error ? (
        <div className="bg-red-100 text-red-700 p-4 rounded-md mb-4">
          {error}
        </div>
      ) : (
        <ChatInterface
          initialMessages={initialMessages}
          initialConversationId={isNewChat ? undefined : conversationId}
        />
      )}
    </div>
  );
}
